{"name":"Sequel-rails","tagline":"A gem for using Sequel with Rails 3.x and 4.x","body":"sequel-rails\r\n============\r\n\r\n[![Build Status](https://travis-ci.org/TalentBox/sequel-rails.png?branch=master)](https://travis-ci.org/TalentBox/sequel-rails)\r\n[![Code Climate](https://codeclimate.com/github/TalentBox/sequel-rails.png)](https://codeclimate.com/github/TalentBox/sequel-rails)\r\n\r\nThis gem provides the railtie that allows [sequel](http://github.com/jeremyevans/sequel) to hook into [rails3](http://github.com/rails/rails) and thus behave like a rails framework component. Just like activerecord does in rails, [sequel-rails](http://github.com/talentbox/sequel-rails) uses the railtie API to hook into rails. The two are actually hooked into rails almost identically.\r\n\r\nThe code for this gem was initially taken from the excellent [dm-rails](http://github.com/datamapper/dm-rails) project.\r\n\r\nThis was originally a fork of [brasten](https://github.com/brasten)'s [sequel-rails](https://github.com/brasten/sequel-rails) that has been updated to support newer versions of rails.\r\n\r\nSince January 2013, we've became the official maintainers of the gem after [brasten](https://github.com/brasten) proposed us.\r\n\r\nUsing sequel-rails\r\n==================\r\n\r\nUsing sequel with rails3 requires a couple minor changes.\r\n\r\nFirst, add the following to your Gemfile (after the `Rails` lines):\r\n\r\n```ruby\r\n# depending on you database\r\ngem \"pg\"        # for PostgreSQL\r\ngem \"mysql2\"    # for MySQL\r\ngem \"sqlite3\"   # for Sqlite\r\n\r\ngem \"sequel-rails\"\r\n```\r\n\r\n... be sure to run \"bundle install\" if needed!\r\n\r\nSecondly, you'll need to require the different Rails components separately in your `config/application.rb` file, and not require `ActiveRecord`.  The top of your `config/application.rb` will probably look something like:\r\n\r\n```ruby\r\n# require 'rails/all'\r\n\r\n# Instead of 'rails/all', require these:\r\nrequire \"action_controller/railtie\"\r\n# require \"active_record/railtie\"\r\nrequire \"action_mailer/railtie\"\r\nrequire \"sprockets/railtie\"\r\n```\r\n\r\nStarting with sequel-rails 0.4.0.pre3 we don't change default Sequel behaviour\r\nnor include any plugin by default, if you want to get back the previous\r\nbehaviour, you can create a new initializer (eg: `config/initializers/sequel.rb`) with content:\r\n\r\n```ruby\r\nrequire \"sequel_rails/railties/legacy_model_config\"\r\n```\r\n\r\nAfter those changes, you should be good to go!\r\n\r\nConfiguration\r\n====================================\r\nYou can configure some options with the usual rails mechanism, in\r\n`config/application.rb` and/or in `config/environments/*.rb`.\r\n\r\n```ruby\r\n    # Allowed options: :sql, :ruby.\r\n    config.sequel.schema_format = :sql\r\n\r\n    # Whether to dump the schema after successful migrations.\r\n    # Defaults to false in production and test, true otherwise.\r\n    config.sequel.schema_dump = true\r\n\r\n    # These override corresponding settings from the database config.\r\n    config.sequel.max_connections = 16\r\n    config.sequel.search_path = %w(mine public)\r\n\r\n    # Configure whether database's rake tasks will be loaded or not\r\n    # Defaults to true\r\n    config.sequel.load_database_tasks = false\r\n```\r\n\r\nThe connection settings are read from the file `config/database.yml` and is\r\nexpected to be similar to `ActiveRecord`'s format.\r\n\r\nHere's some examples:\r\n\r\n1. For PostgreSQL:\r\n\r\n```yaml\r\ndevelopment:\r\n  adapter: postgresql\r\n  database: a_database_name\r\n  user: user_name # Also accept 'username' as key, if both are present 'username' is used\r\n  password: password\r\n  host: 10.0.0.2 # Optional\r\n  port: 5432 # Optional\r\n  owner: owner_name # Optional\r\n  encoding: utf8 # Optional, also accept 'charset' as key, if both are present 'encoding' is used (defaults to 'utf8')\r\n  maintenance_db: template2 # Optional\r\n  locale: en_US.UTF-8 # Optional, equivalent to setting 'collation' and 'ctype' to the same value\r\n  collation: en_US.UTF-8 # Optional\r\n  ctype: en_US.UTF-8 # Optional\r\n  template: template1 # Optional\r\n  tablespace: non_default_tablespace_name # Optional\r\n```\r\n\r\n2. For MySQL:\r\n\r\n```yaml\r\ndevelopment:\r\n  adapter: mysql # Also accept mysql2\r\n  database: a_database_name\r\n  user: user_name # Also accept 'username' as key, if both are present 'username' is used\r\n  password: password\r\n  host: 10.0.0.2 # Optional\r\n  port: 5432 # Optional\r\n  charset: latin1 # Optional (defaults to 'utf8')\r\n  collation: latin1_general_ci # Optional (defaults to 'utf8_unicode_ci')\r\n```\r\n\r\n2. For SQLite:\r\n\r\n```yaml\r\ndevelopment:\r\n  adapter: sqlite # Also accept sqlite3\r\n  database: db/mydatabase.sqlite # Path to db relative to Rails root\r\n```\r\n\r\nFor in memory testing:\r\n\r\n```yaml\r\ndevelopment:\r\n  adapter: sqlite # Also accept sqlite3\r\n  database: \":memory:\"\r\n```\r\n\r\nEnabling plugins\r\n================\r\n\r\nIf you want to enable plugins for all your models, you should use the\r\nafter_connect configuration option in `config/application.rb` (0.6.2+):\r\n\r\n```ruby\r\n    config.sequel.after_connect = proc do\r\n      Sequel::Model.plugin :timestamps, update_on_create: true\r\n    end\r\n```\r\n\r\nThis will ensure that these plugins are loaded before any Sequel models are\r\nloaded. Loading plugins into `Sequel::Model` after subclasses are already\r\ncreated is not supported by Sequel. You can also load extensions in\r\n`after_connect` or perform any custom actions that you need.\r\n\r\nAvailable sequel specific rake tasks\r\n====================================\r\n\r\nTo get a list of all available rake tasks in your rails3 app, issue the usual in you app's root directory:\r\n\r\n```bash\r\nrake -T\r\n```\r\n\r\nor if you don't have hooks in place to run commands with bundle by default:\r\n\r\n```bash\r\nbundle exec rake -T\r\n```\r\n\r\nOnce you do that, you will see the following rake tasks among others. These are the ones that sequel-rails added or replaced:\r\n\r\n```bash\r\nrake db:create[env]                   # Create the database defined in config/database.yml for the current Rails.env\r\nrake db:create:all                    # Create all the local databases defined in config/database.yml\r\nrake db:drop[env]                     # Create the database defined in config/database.yml for the current Rails.env\r\nrake db:drop:all                      # Drops all the local databases defined in config/database.yml\r\nrake db:force_close_open_connections  # Forcibly close any open connections to the test database\r\nrake db:migrate                       # Migrate the database to the latest version\r\nrake db:migrate:down                  # Runs the \"down\" for a given migration VERSION.\r\nrake db:migrate:redo                  # Rollbacks the database one migration and re migrate up.\r\nrake db:migrate:reset                 # Resets your database using your migrations for the current environment\r\nrake db:migrate:up                    # Runs the \"up\" for a given migration VERSION.\r\nrake db:reset                         # Drops and recreates the database from db/schema.rb for the current environment and loads the seeds.\r\nrake db:schema:dump                   # Create a db/schema.rb file that can be portably used against any DB supported by Sequel\r\nrake db:schema:load                   # Load a schema.rb file into the database\r\nrake db:seed                          # Load the seed data from db/seeds.rb\r\nrake db:setup                         # Create the database, load the schema, and initialize with the seed data\r\nrake db:test:prepare                  # Prepare test database (ensure all migrations ran, drop and re-create database then load schema). This task can be run in the same invocation as other task (eg: rake db:migrate db:test:prepare).\r\n```\r\n\r\nNote on Patches/Pull Requests\r\n=============================\r\n\r\n* Fork the project.\r\n* Make your feature addition or bug fix.\r\n* Add specs for it. This is important so I don't break it in a\r\n  future version unintentionally.\r\n* Commit, do not mess with rakefile, version, or history.\r\n  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)\r\n* Send me a pull request. Bonus points for topic branches.\r\n\r\nThe sequel-rails team\r\n=====================\r\n\r\n* Jonathan Tron (JonathanTron) - Current maintainer\r\n* Joseph Halter (JosephHalter) - Current maintainer\r\n\r\nPrevious maintainer\r\n===================\r\n\r\n[Original project](https://github.com/brasten/sequel-rails):\r\n\r\n* Brasten Sager (brasten) - Project creator\r\n\r\nContributors\r\n============\r\n\r\nImprovements has been made by those awesome contributors:\r\n\r\n* Benjamin Atkin (benatkin)\r\n* Gabor Ratky (rgabo)\r\n* Joshua Hansen (binarypaladin)\r\n* Arron Washington (radicaled)\r\n* Thiago Pradi (tchandy)\r\n* Sascha Cunz (scunz)\r\n* Brian Donovan (eventualbuddha)\r\n* Jack Danger Canty (JackDanger)\r\n* Ed Ruder (edruder)\r\n* Rafa≈Ç Rzepecki (dividedmind)\r\n* Sean Sorrell (rudle)\r\n* Saulius Grigaliunas (sauliusg)\r\n* Jacques Crocker (railsjedi)\r\n* Eric Strathmeyer (strathmeyer)\r\n* Jan Berdajs (mrbrdo)\r\n* Robert Payne (robertjpayne)\r\n* Kevin Menard (nirvdrum)\r\n* Chris Heisterkamp (cheister)\r\n\r\nCredits\r\n=======\r\n\r\nThe [dm-rails](http://github.com/datamapper/dm-rails) team wrote most of the original code, I just sequel-ized it, but since then most of it as been either adapted or rewritten.\r\n\r\nCopyright\r\n=========\r\n\r\nCopyright (c) 2010-2013 The sequel-rails team. See [LICENSE](http://github.com/brasten/sequel-rails/blob/master/LICENSE) for details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}